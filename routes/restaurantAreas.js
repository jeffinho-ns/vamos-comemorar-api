// routes/restaurantAreas.js

const express = require('express');
const router = express.Router();

module.exports = (pool) => {
  /**
   * @route   GET /api/restaurant-areas
   * @desc    Lista todas as √°reas do restaurante
   * @access  Private
   */
  router.get('/', async (req, res) => {
    try {
      console.log('üîç Iniciando busca de √°reas...');
      
      // Verificar se a tabela restaurant_areas existe
      console.log('üîç Verificando se tabela restaurant_areas existe...');
      const [tables] = await pool.execute("SHOW TABLES LIKE 'restaurant_areas'");
      console.log('üìä Resultado da verifica√ß√£o de tabelas:', tables);
      
      if (tables.length === 0) {
        console.log('üìù Criando tabela restaurant_areas...');
        
        try {
          // Criar a tabela
          await pool.execute(`
            CREATE TABLE restaurant_areas (
              id int(11) NOT NULL AUTO_INCREMENT,
              name varchar(255) NOT NULL,
              description text DEFAULT NULL,
              capacity_lunch int(11) DEFAULT 0,
              capacity_dinner int(11) DEFAULT 0,
              is_active tinyint(1) DEFAULT 1,
              created_at timestamp NULL DEFAULT CURRENT_TIMESTAMP,
              updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              PRIMARY KEY (id),
              UNIQUE KEY unique_name (name)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
          `);
          console.log('‚úÖ Tabela criada com sucesso!');
          
          // Inserir dados de exemplo
          await pool.execute(`
            INSERT INTO restaurant_areas (name, description, capacity_lunch, capacity_dinner, is_active) VALUES
            ('√Årea Coberta', '√Årea interna com ar condicionado e ambiente climatizado', 50, 40, 1),
            ('√Årea Descoberta', '√Årea externa com vista para o jardim e ambiente natural', 30, 25, 1),
            ('√Årea VIP', '√Årea exclusiva com servi√ßo diferenciado', 20, 15, 1),
            ('Balc√£o', '√Årea do balc√£o para refei√ß√µes r√°pidas', 15, 12, 1),
            ('Terra√ßo', '√Årea no terra√ßo com vista panor√¢mica', 25, 20, 1)
          `);
          console.log('‚úÖ Dados de exemplo inseridos com sucesso!');
          
        } catch (createError) {
          console.error('‚ùå Erro ao criar tabela:', createError);
          throw createError;
        }
      } else {
        console.log('‚úÖ Tabela restaurant_areas j√° existe');
      }
      
      // Consulta simplificada sem JOINs que podem falhar
      console.log('üîç Executando consulta de √°reas...');
      const query = `
        SELECT 
          ra.*,
          0 as active_reservations,
          0 as active_walk_ins
        FROM restaurant_areas ra
        WHERE ra.is_active = 1
        ORDER BY ra.name ASC
      `;
      
      const [areas] = await pool.execute(query);
      console.log('üìä √Åreas encontradas:', areas.length);
      
      res.json({
        success: true,
        areas: areas
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar √°reas:', error);
      console.error('‚ùå Stack trace:', error.stack);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor: ' + error.message
      });
    }
  });

  /**
   * @route   GET /api/restaurant-areas/:id
   * @desc    Busca uma √°rea espec√≠fica
   * @access  Private
   */
  router.get('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      
      const query = `
        SELECT 
          ra.*,
          COUNT(rr.id) as active_reservations,
          COUNT(wi.id) as active_walk_ins
        FROM restaurant_areas ra
        LEFT JOIN restaurant_reservations rr ON ra.id = rr.area_id 
          AND rr.status IN ('NOVA', 'CONFIRMADA') 
          AND rr.reservation_date = CURDATE()
        LEFT JOIN walk_ins wi ON ra.id = wi.area_id 
          AND wi.status = 'ATIVO'
        WHERE ra.id = ? AND ra.is_active = 1
        GROUP BY ra.id
      `;
      
      const [areas] = await pool.execute(query, [id]);
      
      if (areas.length === 0) {
        return res.status(404).json({
          success: false,
          error: '√Årea n√£o encontrada'
        });
      }
      
      res.json({
        success: true,
        area: areas[0]
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar √°rea:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  });

  /**
   * @route   POST /api/restaurant-areas
   * @desc    Cria uma nova √°rea
   * @access  Private
   */
  router.post('/', async (req, res) => {
    try {
      const {
        name,
        description,
        capacity_lunch = 0,
        capacity_dinner = 0,
        is_active = 1
      } = req.body;
      
      // Valida√ß√µes b√°sicas
      if (!name) {
        return res.status(400).json({
          success: false,
          error: 'Campo obrigat√≥rio: name'
        });
      }
      
      // Verificar se j√° existe uma √°rea com o mesmo nome
      const [existingArea] = await pool.execute(
        'SELECT id FROM restaurant_areas WHERE name = ?',
        [name]
      );
      
      if (existingArea.length > 0) {
        return res.status(400).json({
          success: false,
          error: 'J√° existe uma √°rea com este nome'
        });
      }
      
      const query = `
        INSERT INTO restaurant_areas (
          name, description, capacity_lunch, capacity_dinner, is_active
        ) VALUES (?, ?, ?, ?, ?)
      `;
      
      const params = [name, description, capacity_lunch, capacity_dinner, is_active];
      
      const [result] = await pool.execute(query, params);
      
      // Buscar a √°rea criada
      const [newArea] = await pool.execute(
        'SELECT * FROM restaurant_areas WHERE id = ?',
        [result.insertId]
      );
      
      res.status(201).json({
        success: true,
        message: '√Årea criada com sucesso',
        area: newArea[0]
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao criar √°rea:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  });

  /**
   * @route   PUT /api/restaurant-areas/:id
   * @desc    Atualiza uma √°rea existente
   * @access  Private
   */
  router.put('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const {
        name,
        description,
        capacity_lunch,
        capacity_dinner,
        is_active
      } = req.body;
      
      // Verificar se a √°rea existe
      const [existingArea] = await pool.execute(
        'SELECT id FROM restaurant_areas WHERE id = ?',
        [id]
      );
      
      if (existingArea.length === 0) {
        return res.status(404).json({
          success: false,
          error: '√Årea n√£o encontrada'
        });
      }
      
      // Verificar se j√° existe outra √°rea com o mesmo nome
      if (name) {
        const [duplicateArea] = await pool.execute(
          'SELECT id FROM restaurant_areas WHERE name = ? AND id != ?',
          [name, id]
        );
        
        if (duplicateArea.length > 0) {
          return res.status(400).json({
            success: false,
            error: 'J√° existe uma √°rea com este nome'
          });
        }
      }
      
      const query = `
        UPDATE restaurant_areas SET
          name = COALESCE(?, name),
          description = COALESCE(?, description),
          capacity_lunch = COALESCE(?, capacity_lunch),
          capacity_dinner = COALESCE(?, capacity_dinner),
          is_active = COALESCE(?, is_active),
          updated_at = CURRENT_TIMESTAMP
        WHERE id = ?
      `;
      
      const params = [name, description, capacity_lunch, capacity_dinner, is_active, id];
      
      await pool.execute(query, params);
      
      // Buscar a √°rea atualizada
      const [updatedArea] = await pool.execute(
        'SELECT * FROM restaurant_areas WHERE id = ?',
        [id]
      );
      
      res.json({
        success: true,
        message: '√Årea atualizada com sucesso',
        area: updatedArea[0]
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar √°rea:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  });

  /**
   * @route   DELETE /api/restaurant-areas/:id
   * @desc    Deleta uma √°rea (soft delete)
   * @access  Private
   */
  router.delete('/:id', async (req, res) => {
    try {
      const { id } = req.params;
      
      // Verificar se a √°rea existe
      const [existingArea] = await pool.execute(
        'SELECT id FROM restaurant_areas WHERE id = ?',
        [id]
      );
      
      if (existingArea.length === 0) {
        return res.status(404).json({
          success: false,
          error: '√Årea n√£o encontrada'
        });
      }
      
      // Verificar se h√° reservas ou passantes ativos nesta √°rea
      const [activeReservations] = await pool.execute(
        'SELECT COUNT(*) as count FROM restaurant_reservations WHERE area_id = ? AND status IN ("NOVA", "CONFIRMADA")',
        [id]
      );
      
      const [activeWalkIns] = await pool.execute(
        'SELECT COUNT(*) as count FROM walk_ins WHERE area_id = ? AND status = "ATIVO"',
        [id]
      );
      
      if (activeReservations[0].count > 0 || activeWalkIns[0].count > 0) {
        return res.status(400).json({
          success: false,
          error: 'N√£o √© poss√≠vel deletar uma √°rea com reservas ou passantes ativos'
        });
      }
      
      // Soft delete - marcar como inativa
      await pool.execute(
        'UPDATE restaurant_areas SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
        [id]
      );
      
      res.json({
        success: true,
        message: '√Årea desativada com sucesso'
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao deletar √°rea:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  });

  /**
   * @route   GET /api/restaurant-areas/:id/availability
   * @desc    Verifica disponibilidade de uma √°rea em uma data espec√≠fica
   * @access  Private
   */
  router.get('/:id/availability', async (req, res) => {
    try {
      const { id } = req.params;
      const { date } = req.query;
      
      if (!date) {
        return res.status(400).json({
          success: false,
          error: 'Par√¢metro obrigat√≥rio: date'
        });
      }
      
      // Buscar informa√ß√µes da √°rea
      const [area] = await pool.execute(
        'SELECT * FROM restaurant_areas WHERE id = ? AND is_active = 1',
        [id]
      );
      
      if (area.length === 0) {
        return res.status(404).json({
          success: false,
          error: '√Årea n√£o encontrada'
        });
      }
      
      // Contar reservas confirmadas para a data
      const [reservations] = await pool.execute(
        'SELECT COUNT(*) as count, SUM(number_of_people) as total_people FROM restaurant_reservations WHERE area_id = ? AND reservation_date = ? AND status IN ("NOVA", "CONFIRMADA")',
        [id, date]
      );
      
      // Contar passantes ativos
      const [walkIns] = await pool.execute(
        'SELECT COUNT(*) as count, SUM(number_of_people) as total_people FROM walk_ins WHERE area_id = ? AND DATE(arrival_time) = ? AND status = "ATIVO"',
        [id, date]
      );
      
      const areaData = area[0];
      const reservationCount = reservations[0].count;
      const reservationPeople = reservations[0].total_people || 0;
      const walkInCount = walkIns[0].count;
      const walkInPeople = walkIns[0].total_people || 0;
      
      // Calcular capacidade dispon√≠vel (usando capacidade do almo√ßo como padr√£o)
      const totalCapacity = areaData.capacity_lunch;
      const totalOccupied = reservationPeople + walkInPeople;
      const availableCapacity = Math.max(0, totalCapacity - totalOccupied);
      
      res.json({
        success: true,
        availability: {
          area: areaData,
          date: date,
          totalCapacity: totalCapacity,
          totalOccupied: totalOccupied,
          availableCapacity: availableCapacity,
          reservations: {
            count: reservationCount,
            people: reservationPeople
          },
          walkIns: {
            count: walkInCount,
            people: walkInPeople
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar disponibilidade:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor'
      });
    }
  });

  return router;
};
