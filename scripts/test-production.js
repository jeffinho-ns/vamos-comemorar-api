#!/usr/bin/env node

// Script de Teste para Produ√ß√£o
// Sistema de Reservas do Restaurante

const pool = require('../config/database');

async function testProduction() {
  console.log('üß™ Testando configura√ß√£o de produ√ß√£o...\n');

  try {
    // 1. Testar conex√£o com banco de dados
    console.log('1Ô∏è‚É£ Testando conex√£o com banco de dados...');
    await pool.execute('SELECT 1');
    console.log('‚úÖ Conex√£o com banco de dados OK\n');

    // 2. Verificar se as tabelas existem
    console.log('2Ô∏è‚É£ Verificando estrutura das tabelas...');
    
    const tables = [
      'restaurant_reservations',
      'waitlist', 
      'walk_ins',
      'restaurant_areas'
    ];

    for (const table of tables) {
      try {
        const [result] = await pool.execute(`SHOW TABLES LIKE '${table}'`);
        if (result.length > 0) {
          console.log(`‚úÖ Tabela ${table} existe`);
        } else {
          console.log(`‚ö†Ô∏è Tabela ${table} n√£o existe - ser√° criada automaticamente`);
        }
      } catch (error) {
        console.log(`‚ùå Erro ao verificar tabela ${table}:`, error.message);
      }
    }
    console.log('');

    // 3. Testar inser√ß√£o de dados de teste
    console.log('3Ô∏è‚É£ Testando inser√ß√£o de dados...');
    
    // Testar inser√ß√£o de √°rea
    try {
      const [areaResult] = await pool.execute(`
        INSERT INTO restaurant_areas (name, capacity_lunch, capacity_dinner, description) 
        VALUES ('√Årea Teste', 50, 40, '√Årea para testes') 
        ON DUPLICATE KEY UPDATE name = name
      `);
      console.log('‚úÖ Inser√ß√£o de √°rea OK');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro na inser√ß√£o de √°rea:', error.message);
    }

    // 4. Testar verifica√ß√£o de capacidade
    console.log('4Ô∏è‚É£ Testando verifica√ß√£o de capacidade...');
    try {
      const [capacityResult] = await pool.execute(`
        SELECT SUM(capacity_dinner) as total_capacity 
        FROM restaurant_areas
      `);
      console.log(`‚úÖ Capacidade total: ${capacityResult[0].total_capacity || 0} pessoas`);
    } catch (error) {
      console.log('‚ùå Erro na verifica√ß√£o de capacidade:', error.message);
    }

    // 5. Testar lista de espera
    console.log('5Ô∏è‚É£ Testando lista de espera...');
    try {
      const [waitlistResult] = await pool.execute(`
        SELECT COUNT(*) as count FROM waitlist WHERE status = 'AGUARDANDO'
      `);
      console.log(`‚úÖ Pessoas na lista de espera: ${waitlistResult[0].count}`);
    } catch (error) {
      console.log('‚ùå Erro na verifica√ß√£o da lista de espera:', error.message);
    }

    console.log('\nüéâ Testes conclu√≠dos com sucesso!');
    console.log('‚úÖ Sistema pronto para produ√ß√£o');

  } catch (error) {
    console.error('\n‚ùå Erro durante os testes:', error.message);
    console.error('üîß Verifique as configura√ß√µes de banco de dados');
    process.exit(1);
  } finally {
    // Fechar conex√£o
    await pool.end();
    process.exit(0);
  }
}

// Executar testes
testProduction();




