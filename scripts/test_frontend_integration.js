const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// Configura√ß√£o da API
const API_BASE_URL = 'https://vamos-comemorar-api.onrender.com';

async function testFrontendIntegration() {
  try {
    console.log('üîç Testando integra√ß√£o frontend-backend...');
    
    // 1. Testar endpoint sem autentica√ß√£o (deve falhar)
    console.log('\n1Ô∏è‚É£ Testando endpoint sem autentica√ß√£o...');
    try {
      const response = await fetch(`${API_BASE_URL}/api/reservas/camarotes/7`);
      console.log(`   Status: ${response.status}`);
      if (response.status === 401) {
        console.log('   ‚úÖ Endpoint protegido corretamente (401 Unauthorized)');
      } else {
        console.log('   ‚ö†Ô∏è Endpoint n√£o est√° protegido como esperado');
      }
    } catch (error) {
      console.log('   ‚ùå Erro na requisi√ß√£o:', error.message);
    }
    
    // 2. Testar endpoint com token inv√°lido
    console.log('\n2Ô∏è‚É£ Testando endpoint com token inv√°lido...');
    try {
      const response = await fetch(`${API_BASE_URL}/api/reservas/camarotes/7`, {
        headers: { 'Authorization': 'Bearer token_invalido' }
      });
      console.log(`   Status: ${response.status}`);
      if (response.status === 401) {
        console.log('   ‚úÖ Token inv√°lido rejeitado corretamente (401 Unauthorized)');
      } else {
        console.log('   ‚ö†Ô∏è Token inv√°lido n√£o foi rejeitado como esperado');
      }
    } catch (error) {
      console.log('   ‚ùå Erro na requisi√ß√£o:', error.message);
    }
    
    // 3. Verificar se o endpoint est√° registrado corretamente
    console.log('\n3Ô∏è‚É£ Verificando se o endpoint est√° acess√≠vel...');
    try {
      const response = await fetch(`${API_BASE_URL}/api/reservas/camarotes/7`, {
        method: 'OPTIONS'
      });
      console.log(`   Status OPTIONS: ${response.status}`);
      console.log('   Headers permitidos:', response.headers.get('allow') || 'N/A');
    } catch (error) {
      console.log('   ‚ùå Erro na requisi√ß√£o OPTIONS:', error.message);
    }
    
    // 4. Testar endpoint de eventos (para comparar)
    console.log('\n4Ô∏è‚É£ Testando endpoint de eventos para compara√ß√£o...');
    try {
      const response = await fetch(`${API_BASE_URL}/api/events`);
      console.log(`   Status: ${response.status}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`   ‚úÖ Endpoint de eventos funcionando (${Array.isArray(data) ? data.length : 'N/A'} eventos)`);
      } else {
        console.log('   ‚ö†Ô∏è Endpoint de eventos com problema');
      }
    } catch (error) {
      console.log('   ‚ùå Erro na requisi√ß√£o de eventos:', error.message);
    }
    
    console.log('\nüìã Resumo:');
    console.log('   - O endpoint /api/reservas/camarotes/:id_place requer autentica√ß√£o');
    console.log('   - √â necess√°rio um token JWT v√°lido para acessar');
    console.log('   - Verifique se o usu√°rio est√° logado no painel de eventos');
    console.log('   - Verifique se o token est√° sendo enviado corretamente');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testFrontendIntegration();
